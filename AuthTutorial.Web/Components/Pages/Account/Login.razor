@page "/login"
@using AuthTutorial.Models
@using AuthTutorial.Services
@using Data

@inject AuthDbContext _dbContext;
@inject NavigationManager _navigationManager;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username"/>
                <ValidationMessage For="() => Model.UserName"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password"/>
                <ValidationMessage For="() => Model.Password"/>
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm] 
    public LoginViewModelDto Model { get; set; } = new();

    [Inject] 
    public ICookieAuthenticationManager CookieAuthenticationManager { get; set; }

    private string? errorMessage;

    private async Task Authenticate()
    {
        await CookieAuthenticationManager.LoginAsync(Model.UserName, Model.Password);
        
        _navigationManager.NavigateTo("/", true);
    }

}